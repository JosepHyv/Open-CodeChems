<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenCodeChems.Server</name>
    </assembly>
    <members>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.RegisterUser(OpenCodeChems.DataAccess.User)">
            <summary>
            register a new user in the database
            </summary>
            <remarks>
            evaluates whether a new register has been successfully entered into the database
            </remarks>
            <param name = "user"> receives an object of type User </param>
            <returns> boolean with true value if performed correctly </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if the object type User is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.RegisterProfile(OpenCodeChems.DataAccess.Profile)">
            <summary>
            register a new profile in the database
            </summary>
            <remarks>
            evaluates whether a new register has been successfully entered into the database
            </remarks>
            <param name = "profile"> receives an object of type Profile </param>
            <returns> boolean with true value if performed correctly </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if the object type Profile is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.Login(System.String,System.String)">
            <summary>
            check whether a user exists with the provided username and password
            </summary>
            <remarks>
            evaluates whether the credentials entered are correct
            </remarks>
            <param name = "username"> receives an string with the username of the user </param>
            <param name = "password"> receives an string with the hash password of the user </param>
            <returns> boolean with true value if credentials match a user </returns>
            <exception cref="T:System.InvalidOperationException">throw if the username or password is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.EditProfileNickname(System.String,System.String)">
            <summary>
            assigns a new nickname to the user it profile with the provided username
            </summary>
            <remarks>
            evaluates if there is a profile with the specified username, if so it changes its nickname
            </remarks>
            <param name = "username"> receives an string with the username of the user </param>
            <param name = "newNickname"> receives an string with the new nickname of the user </param>
            <returns> boolean with true value if it could update the new nickname </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if username or newNickname is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.EditProfileImage(System.String,System.Byte[])">
            <summary>
            assigns a new image profile to the profile it finds with the provided username
            </summary>
            <remarks>
            evaluates if there is a profile with the specified username, if so it changes its image profile
            </remarks>
            <param name = "username"> receives an string with the username of the user </param>
            <param name = "imageProfile"> receives an array of bytes with the new image profile of the user </param>
            <returns> boolean with true value if it could update the new image profile </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if the username is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.PasswordExist(System.String,System.String)">
            <summary>
            check if exist a register with the hash password and the username
            </summary>
            <param name = "username"> receives an string with the username of the user </param>
            <param name = "hashPassword"> receives an string with the password of the user </param>
            <returns> boolean with true value if exist a register with the password </returns>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.EditUserPassword(System.String,System.String)">
            <summary>
            assigns a new password to the user it finds with the provided username
            </summary>
            <remarks>
            evaluates if there is a user with the specified username, if so it changes its password
            </remarks>
            <param name = "username"> receives an string with the username of the user </param>
            <param name = "newHashedPassword"> receives an string with the new password of the user </param>
            <returns> boolean with true value if it could update the new password </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if the username or newHashedPassword is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.GetProfileByUsername(System.String)">
            <summary>
            gets an object of type Profile  
            </summary>
            <remarks>
            evaluates if there is a Profile with the specified username, if so it gets the Profile
            </remarks>
            <param name = "username"> receives an string with the username of the user </param>
            <returns> object of type Profile </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if the username is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.EmailRegistered(System.String)">
            <summary>
            check if exist a register with the email provided 
            </summary>
            <param name = "email"> receives an string with the email of the user </param>
            <returns>boolean with true value if exist a register with the email</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if the email is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.UsernameRegistered(System.String)">
            <summary>
            check if exist a register with the username provided 
            </summary>
            <param name = "username"> receives an string with the username of the user </param>
            <returns>boolean with true value if exist a register with the username</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if the username is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.NicknameRegistered(System.String)">
            <summary>
            check if exist a register with the nickname provided 
            </summary>
            <param name = "nickname"> receives an string with the nickname of the user </param>
            <returns>boolean with true value if exist a register with the nickname</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if the nickname is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.AddFriend(OpenCodeChems.DataAccess.Friends)">
            <summary>
            register a new friendship in database 
            </summary>
            <remarks>
            register a object of type Friends with the status false
            </remarks>
            <param name = "friends"> receives an object of type Friends </param>
            <returns>boolean with true value if could register the friends</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if object type friends is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.AcceptFriend(OpenCodeChems.DataAccess.Friends)">
            <summary>
            update a friendship in database 
            </summary>
            <remarks>
            update a object of type Friends with the status false to status true, first check if exist a register with the idProfileFrom in the idProfileFrom column and the idProfileTo in the ifProfileTo column
            </remarks>
            <param name = "friends"> receives an object of type Friends </param>
            <returns>boolean with true value if could update the new friends</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if object type friends is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.DenyFriend(OpenCodeChems.DataAccess.Friends)">
            <summary>
            dalete a friendship in database 
            </summary>
            <remarks>
            delete a register of Friends table if the status is equal to false
            </remarks>
            <param name = "friends"> receives an object of type Friends </param>
            <returns>boolean with true value if could delete the friends registerd</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if object type friends is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.FriendshipExist(System.Int32,System.Int32)">
            <summary>
            check if exist a friendship in the database
            </summary>
            <remarks>
            check if the idProfileFrom column exist the idProfileActualPlayer and in the idProfileTo column exist the idProfilePlayerFound, else the the idProfileFrom column exist the idProfilePlayerFound and in the idProfileTo column exist the idProfileActualPlayer
            </remarks>
            <param name = "idProfileActualPlayer"> receives an int with the id profile of the actual player </param>
            <param name = "idProfilePlayerFound"> receives an int with the id profile of the player want to send a friend request </param>
            <returns>boolean with true value if friendship exist</returns>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.GetFriends(System.Int32,System.Boolean)">
            <summary>
            gets the friends of the actual player
            </summary>
            <remarks>
            gets the id of the profiles with wich the actual player has a friendship and the status is equal to true, replaces the id for the nicknames of the profiles
            </remarks>
            <param name = "idProfile"> receives an int with de id profle of the actual player </param>
            <param name = "status"> receives a boolean with the status of the friendship </param>
            <returns>List with the friends of the actual player</returns>ception>
            <exception cref="T:System.InvalidOperationException">throw if idProfile is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.GetFriendsRequests(System.Int32,System.Boolean)">
            <summary>
            gets the friends requests of the actual player
            </summary>
            <remarks>
            gets the id of the profiles with wich the actual player has a friendship and the status is equal to false, replaces the id for the nicknames of the profiles
            </remarks>
            <param name = "idProfile"> receives an int with de id profle of the actual player </param>
            <param name = "status"> receives a boolean with the status of the friendship </param>
            <returns>List with the friends requests of the actual player</returns>ception>
            <exception cref="T:System.InvalidOperationException">throw if idProfile is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.GetProfileByNickname(System.String)">
            <summary>
            gets an object of type Profile  
            </summary>
            <remarks>
            evaluates if there is a Profile with the specified nickname, if so it gets the Profile
            </remarks>
            <param name = "nickname"> receives an string with the nickname of the user </param>
            <returns> object of type Profile </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if the nickname is null</exception>
        </member>
        <member name="M:OpenCodeChems.BussinesLogic.UserManagement.DeleteFriend(OpenCodeChems.DataAccess.Friends)">
            <summary>
            dalete a friendship in database 
            </summary>
            <remarks>
            delete a register of Friends table if exist a register with the idProfileFrom in the idProfileFrom column and idProfileTo in the idProfileTo column, else exist a register with the idProfileTo in the idProfileFrom column and idProfileTo in the idProfileFrom column and the status is equal to true;
            </remarks>
            <param name = "friendsForDelete"> receives an object of type Friends </param>
            <returns>boolean with true value if could delete the friends registerd</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
            <exception cref="T:System.InvalidOperationException">throw if object type friends is null</exception>
        </member>
        <member name="M:Network.RegisterUserRequest(System.String,System.String,System.String,System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            call to RegisterUser and RegisterProfile method 
            </summary>
            <remarks>
            recive nine parameters because RPC with Godot Engine can't serialize objects, only it can recive primitive data, call the RegisterUser method if it completed correctly call the RegisterProfile method and send signal to client
            </remarks>
            <param name = "name"> receives a string with the name of the new user </param>
            <param name = "email"> receives a string with the email of the new user </param>
            <param name = "username"> receives a string with the username of the new user </param>
            <param name = "hashPassword"> receives a string with the password of the new user </param>
            <param name = "nickname"> receives a string with the nickname of the new user </param>
            <param name = "imageProfile"> receives a array of bytes with the image profile of the new user </param>
            <param name = "victories"> receives an int with the default victories of the new user </param>
            <param name = "defeats"> receives an int with the default defeats of the new user </param>
            <returns>Signal to client</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">throw if lost connection with the database</exception>
        </member>
    </members>
</doc>
